SELECT * FROM order_items limit 100;
SELECT 
    c.customer_id,
    c.customer_city,
    o.order_id,
    SUM(oi.price) AS total_price
FROM 
    customer c
JOIN 
    orders o ON c.customer_id = o.customer_id
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    c.customer_id,
    c.customer_city,
    o.order_id
    limit 1000;

/*Aggregation and Group By:

Write a query to find the total number of orders and total revenue generated by each seller.
*/
SELECT 
    oi.seller_id,
    COUNT(oi.order_id) AS total_orders,
    round(SUM(oi.price)) AS total_revenue
FROM 
    order_items oi
GROUP BY 
    oi.seller_id;

/*
Subqueries:

Write a query to list the top 3 products based on the number of times they have been ordered.*/
SELECT 
    oi.product_id,
    COUNT(*) AS order_count
FROM 
    order_items oi
GROUP BY 
    oi.product_id
ORDER BY 
    order_count DESC
LIMIT 10;


SELECT 
    oi.product_id,
    COUNT(*) AS order_count,
	round(SUM(oi.price)) AS total_revenue
FROM 
    order_items oi
GROUP BY 
    oi.product_id
ORDER BY 
    order_count DESC
LIMIT 10;

SELECT 
    product_id,
    order_count
FROM (
    SELECT 
        oi.product_id,
        COUNT(*) AS order_count
    FROM 
        order_items oi
    GROUP BY 
        oi.product_id
) AS product_order_counts
ORDER BY 
    order_count DESC
LIMIT 3;

/*
Window Functions:

Write a query to rank customers based on their total spending and retrieve the top 5 customers.
*/
WITH customer_total_spend AS (
    SELECT 
        c.customer_id,
        SUM(oi.price) AS total_spend
    FROM 
        customer c
    JOIN 
        orders o ON c.customer_id = o.customer_id
    JOIN 
        order_items oi ON o.order_id = oi.order_id
    GROUP BY 
        c.customer_id
)

SELECT 
    customer_id,
    total_spend,
    RANK() OVER (ORDER BY total_spend DESC) AS customer_rank
FROM 
    customer_total_spend
ORDER BY 
    customer_rank
;


/*
CTEs (Common Table Expressions):
#Monthly sales trend
Write a query to calculate the monthly sales trend for each product using CTEs.*/
WITH monthly_sales AS (
    SELECT 
        oi.product_id,
        SUM(oi.price) AS total_sales,
        MONTH(o.order_approved_at) AS month,
        YEAR(o.order_approved_at) AS year
    FROM 
        order_items oi
    JOIN 
        orders o ON oi.order_id = o.order_id
    GROUP BY 
        oi.product_id,
        YEAR(o.order_approved_at),
        MONTH(o.order_approved_at)
)
SELECT 
	row_number() over(partition by product_id),
    product_id,
    total_sales,
    month,
    year
FROM 
    monthly_sales
ORDER By
product_id,month,year
;

/*
Conditional Aggregation:

Write a query to find the total revenue for each product category 
and the number of orders for products in that category.*/
SELECT 
    pr.product_category,
    round(SUM(oi.price)) AS total_sales,
    COUNT(DISTINCT oi.order_id) AS total_orders
FROM 
    order_items oi
JOIN 
    products pr ON oi.product_id = pr.product_id
GROUP BY 
    pr.product_category
ORDER BY 
    total_sales DESC;

/*
Self Joins:
#3nahi samazal
Write a query to find customers who have placed more than one order on the same day.*/
SELECT 
    o1.customer_id,
    o1.order_approved_at,
    COUNT(o1.order_id) AS order_count
FROM 
    orders o1
JOIN 
    orders o2 ON o1.customer_id = o2.customer_id 
              AND o1.order_approved_at = o2.order_approved_at 
              AND o1.order_id != o2.order_id
GROUP BY 
    o1.customer_id,
    o1.order_approved_at
HAVING 
    COUNT(o1.order_id) > 1;
/*
Case Statements:

Write a query to categorize orders based on their delivery time (e.g., delivered within 3 days, 4-7 days, more than 7 days).*/

SELECT 
    o.order_id,
    o.customer_id,
    o.order_status,
    o.order_purchase_timestamp,
    o.order_approved_at,
    o.order_delivered_customer_date,
    o.order_estimated_delivery_date,
    DATEDIFF(o.order_delivered_customer_date, o.order_approved_at) AS delivery_time,
    CASE
        WHEN DATEDIFF(o.order_delivered_customer_date, o.order_approved_at) <= 3 THEN 'Delivered within 3 days'
        WHEN DATEDIFF(o.order_delivered_customer_date, o.order_approved_at) BETWEEN 4 AND 7 THEN 'Delivered within 4-7 days'
        WHEN DATEDIFF(o.order_delivered_customer_date, o.order_approved_at) > 7 THEN 'Delivered in more than 7 days'
        ELSE 'Unknown'
    END AS delivery_category
FROM 
    orders o
WHERE 
    o.order_status = 'delivered';


/*
Date Functions:

Write a query to find the average delivery time for orders delivered in the year 2018.*/
SELECT AVG(datediff(order_delivered_customer_date,order_approved_at))AS DELIVERY_TIME FROM orders
WHERE 
YEAR(ORDER_PURCHASE_TIMESTAMP)=2018
AND order_status="delivered"
And order_delivered_customer_date is not null
;

/*
Views:

Write a query to create a view that lists all orders along with their total items and total price.*/
CREATE VIEW OrderSummary AS
SELECT 
    o.order_id,
    COUNT(oi.product_id) AS total_items,
    SUM(oi.price) AS total_price
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    o.order_id;
    
SELECT * FROM OrderSummary
    where total_items >10;
    
CREATE TEMPORARY TABLE SellerSalesSummary AS
SELECT 
    s.seller_id,
    #s.seller_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    round(SUM(oi.price),2) AS total_sales
FROM 
    seller s
JOIN 
    order_items oi ON s.seller_id = oi.seller_id
JOIN 
    orders o ON oi.order_id = o.order_id
GROUP BY 
    s.seller_id;
select  *,
rank() over(order by total_sales desc) from SellerSalesSummarys
where total_orders > 1000 ;#, s.seller_name;



